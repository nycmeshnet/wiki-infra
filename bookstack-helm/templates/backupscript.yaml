apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-script
  namespace: {{ .Values.meshwiki_app_namespace }}
data:
  backup.db.sh: |
    echo "Dumping db"
    mysqldump -h "$DB_HOST" -u "$DB_USER" --password="$DB_PASS" "$DB_DATABASE" > wiki.sql
    echo "Creating tarball"
    backup_name="wiki_backup_db_$(date +%s).tar.gz"
    tar -chzvf $backup_name wiki.sql
    echo "push to s3"
    apk add aws-cli
    aws s3 cp ./$backup_name "$BACKUP_S3_URL"
    echo "uploaded"
    rm $backup_name
    rm wiki.sql
    echo "done"
  backup.files.sh: |
    echo "Creating tarball"
    backup_name="wiki_backup_files_$(date +%s).tar.gz"
    tar -chzvf $backup_name /app/www/public/uploads/ /app/www/storage/uploads/ /app/www/public/img/
    echo "push to s3"
    apk add aws-cli
    aws s3 cp ./$backup_name "$BACKUP_S3_URL"
    echo "uploaded"
    rm $backup_name
    echo "done"
  backup.files.hook.sh: |
    echo "setting hook"
    echo "done"
  restore.db.sh: |
    echo "Checking if restore is needed"
    echo "Restore file is: $RESTORE_S3_URL"
    if [ ! -z "$RESTORE_S3_URL" ]; then
      echo "Restoring from $RESTORE_S3_URL"
      apk add aws-cli
      aws s3 cp "$RESTORE_S3_URL" /tmp/restore.tgz
      echo "downloaded tarball"
      tar -xzf /tmp/restore.tgz -C /
      mysql -h "$DB_HOST" -u "$DB_USER" --password="$DB_PASS" $DB_DATABASE < /wiki.sql
    else
      echo "Not restoring"
    fi
    echo "done"
  restore.files.sh: |
    echo "Checking if restore is needed"
    echo "Restore file is: $RESTORE_S3_URL"
    if [ ! -z "$RESTORE_S3_URL" ]; then
      echo "Restoring from $RESTORE_S3_URL"
      apk add aws-cli
      aws s3 cp "$RESTORE_S3_URL" /tmp/restore.tgz
      echo "downloaded tarball"
      tar -xzf /tmp/restore.tgz -C /
    else
      echo "Not restoring"
    fi
    echo "done"
